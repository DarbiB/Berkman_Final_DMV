// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Berkman_Final_DMV.Models;

namespace Berkman_Final_DMV.Data
{
    public partial class DMVContext : DbContext
    {
        public DMVContext()
        {
        }

        public DMVContext(DbContextOptions<DMVContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DriversInfraction> DriversInfractions { get; set; }
        public virtual DbSet<Infraction> Infractions { get; set; }
        public virtual DbSet<Personnel> Personnel { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Driver>(entity =>
            {
                entity.Property(e => e.DriverId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DriverFirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DriverLastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DriverSsn)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DriverSSN");
            });

            modelBuilder.Entity<DriversInfraction>(entity =>
            {
                entity.HasKey(e => new { e.InfractionId, e.DriverId, e.PersonnelId, e.VehicleId });

                entity.Property(e => e.InfractionId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DriverId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.DriversInfractions)
                    .HasForeignKey(d => d.DriverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DriversInfractions_Drivers");

                entity.HasOne(d => d.Infraction)
                    .WithMany(p => p.DriversInfractions)
                    .HasForeignKey(d => d.InfractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DriversInfractions_Infractions");

                entity.HasOne(d => d.Personnel)
                    .WithMany(p => p.DriversInfractions)
                    .HasForeignKey(d => d.PersonnelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DriversInfractions_Personnel");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.DriversInfractions)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DriversInfractions_Vehicles");
            });

            modelBuilder.Entity<Infraction>(entity =>
            {
                entity.Property(e => e.InfractionId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InfractionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personnel>(entity =>
            {
                entity.Property(e => e.PersonnelId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelFirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelLastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelPassword)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelTitle)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelUsername)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.Property(e => e.VehicleId)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DriverId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VehiclePlate)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.DriverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Drivers");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}